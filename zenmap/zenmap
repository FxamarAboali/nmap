#!/usr/bin/env python3

# ***********************IMPORTANT NMAP LICENSE TERMS************************
# *
# * The Nmap Security Scanner is (C) 1996-2023 Nmap Software LLC ("The Nmap
# * Project"). Nmap is also a registered trademark of the Nmap Project.
# *
# * This program is distributed under the terms of the Nmap Public Source
# * License (NPSL). The exact license text applying to a particular Nmap
# * release or source code control revision is contained in the LICENSE
# * file distributed with that version of Nmap or source code control
# * revision. More Nmap copyright/legal information is available from
# * https://nmap.org/book/man-legal.html, and further information on the
# * NPSL license itself can be found at https://nmap.org/npsl/ . This
# * header summarizes some key points from the Nmap license, but is no
# * substitute for the actual license text.
# *
# * Nmap is generally free for end users to download and use themselves,
# * including commercial use. It is available from https://nmap.org.
# *
# * The Nmap license generally prohibits companies from using and
# * redistributing Nmap in commercial products, but we sell a special Nmap
# * OEM Edition with a more permissive license and special features for
# * this purpose. See https://nmap.org/oem/
# *
# * If you have received a written Nmap license agreement or contract
# * stating terms other than these (such as an Nmap OEM license), you may
# * choose to use and redistribute Nmap under those terms instead.
# *
# * The official Nmap Windows builds include the Npcap software
# * (https://npcap.com) for packet capture and transmission. It is under
# * separate license terms which forbid redistribution without special
# * permission. So the official Nmap Windows builds may not be redistributed
# * without special permission (such as an Nmap OEM license).
# *
# * Source is provided to this software because we believe users have a
# * right to know exactly what a program is going to do before they run it.
# * This also allows you to audit the software for security holes.
# *
# * Source code also allows you to port Nmap to new platforms, fix bugs, and add
# * new features. You are highly encouraged to submit your changes as a Github PR
# * or by email to the dev@nmap.org mailing list for possible incorporation into
# * the main distribution. Unless you specify otherwise, it is understood that
# * you are offering us very broad rights to use your submissions as described in
# * the Nmap Public Source License Contributor Agreement. This is important
# * because we fund the project by selling licenses with various terms, and also
# * because the inability to relicense code has caused devastating problems for
# * other Free Software projects (such as KDE and NASM).
# *
# * The free version of Nmap is distributed in the hope that it will be
# * useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. Warranties,
# * indemnification and commercial support are all available through the
# * Npcap OEM program--see https://nmap.org/oem/
# *
# ***************************************************************************/

import sys
import stat
import logging
import os
from pathlib import Path
import importlib.util

# Validate and extract environment variables
try:
    SYMLINK_LIMIT = int(os.getenv('SYMLINK_LIMIT', 5))
except ValueError:
    raise ValueError("SYMLINK_LIMIT should be a positive integer")
INSTALL_LIB = os.getenv('INSTALL_LIB')
if INSTALL_LIB is None:
    raise ValueError("INSTALL_LIB environment variable is not set")

# Define Constants class
class Constants:
    SYMLINK_LIMIT = SYMLINK_LIMIT
    INSTALL_LIB = INSTALL_LIB

# Logging setup
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class DirectoryNotSecureError(Exception):
    pass

class DirectoryPathInvalidError(Exception):
    pass

class AppImportError(Exception):
    pass

def check_dir_security(dir: Path, num_symlinks=0) -> bool:
    """
    Check the directory for potential security vulnerabilities
    """
    dir = dir.resolve()
    if num_symlinks >= Constants.SYMLINK_LIMIT:
        raise DirectoryNotSecureError(f"Too many symbolic links: {num_symlinks}")
    if not dir.is_dir():
        raise DirectoryPathInvalidError(f"Path is not a directory: {dir}")
    buf = dir.stat()
    if buf.st_uid != os.geteuid() and buf.st_uid != 0:
        raise DirectoryNotSecureError(f"Invalid user ID: {buf.st_uid}")
    if buf.st_mode & (stat.S_IWGRP | stat.S_IWOTH) != 0:
        raise DirectoryNotSecureError(f"Invalid permissions: {buf.st_mode}")
    return True

def append_install_lib_to_sys_path():
    """
    Append installation library path to sys path
    """
    if Constants.INSTALL_LIB:
        secure_dir_path = Path(Constants.INSTALL_LIB).resolve()
        if secure_dir_path not in map(Path, sys.path) and all(check_dir_security(dir) for dir in secure_dir_path.parents):
            sys.path.append(str(secure_dir_path))
        else:
            raise DirectoryNotSecureError(f"{secure_dir_path} is not secure")

def main():
    """
    Main function
    """
    try:
        append_install_lib_to_sys_path()
        spec = importlib.util.find_spec("zenmapGUI.App")
        if spec:
            module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(module)
            module.run()
        else:
            raise AppImportError("The zenmapGUI.App module could not be found. Check the module's location and the PYTHONPATH environment variable.")
    except (DirectoryNotSecureError, DirectoryPathInvalidError, AppImportError) as e:
        logger.error(f"Error: {e}", exc_info=True)
        sys.exit(1)

if __name__ == '__main__':
    main()

