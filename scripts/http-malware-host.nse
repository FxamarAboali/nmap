local http = require "http"
local nmap = require "nmap"
local shortport = require "shortport"
local stdnse = require "stdnse"
local string = require "string"
local table = require "table"

description = [[
Looks for signature of known server compromises.

Currently, the only signature it looks for is the one discussed here:
http://blog.unmaskparasites.com/2009/09/11/dynamic-dns-and-botnet-of-zombie-web-servers/.
This is done by requesting the page <code>/ts/in.cgi?open2</code> and
looking for an errant 302 (it attempts to detect servers that always
return 302). Thanks to Denis from the above link for finding this
technique!
]]

---
--@Usage ./nmap --script http-malware-host <url> -p <port_no>
--
--@args http-malware-host.malwarepath a path to the file containing all the
--      vulnerable paths which are to be appended to check for traces of
--      hacking attempts.
--
--@output
-- Interesting ports on www.sopharma.bg (84.242.167.49):
-- PORT     STATE SERVICE    REASON
-- 80/tcp   open  http       syn-ack
-- |_ http-malware-host: Host appears to be clean
-- 8080/tcp open  http-proxy syn-ack
-- | http-malware-host:
-- |   Host appears to be infected (/ts/in.cgi?open2 redirects to http://last-another-life.ru:8080/index.php)
-- |_  See: http://blog.unmaskparasites.com/2009/09/11/dynamic-dns-and-botnet-of-zombie-web-servers/
-- |_  See: https://blog.sucuri.net/2012/07/new-web-malware-attacks-from-ruin-cgi16.html
--

author = "Ron Bowes"

license = "Same as Nmap--See https://nmap.org/book/man-legal.html"

categories = {"malware", "safe"}


portrule = shortport.http
local vulnerable_links = {}

local function fetch_vulnerable_links(path)
  local f = nmap.fetchfile(path) or path
  if f then
    for e in io.lines(f) do
      if not string.match(e, "^#") then
        table.insert(vulnerable_links, e:lower())
      end
    end
  end
  -- Check if we loaded something
  if #vulnerable_links == 0 then
    -- If not, then load some default paths
    vulnerable_links = {"/ts/in.cgi?open1", "/ts/in.cgi?open2", "/in.cgi?3", "/ts/in.cgi?open4"}
  end
end


action = function(host, port)
  -- Check what response we get for a 404
  local result, result_404, known_404 = http.identify_404(host, port)
  if(result == false) then
    return stdnse.format_output(false, "Couldn't identify 404 message: " .. result_404)
  end

  -- If the 404 result is a 302, we're going to have trouble
  if(result_404 == 302) then
    return stdnse.format_output(false, "Unknown pages return a 302 response; unable to check")
  end

  -- Identify servers that answer 200 to invalid HTTP requests and exit as these would invalidate the test
  if ( result_404 == 200 ) then
    stdnse.debug1("Exiting due to ambiguous response from web server on %s:%s. All URIs return status 200.", host.ip, port.number)
    return false
  end

  -- Fetching the vulnerable paths
  local vulnerable_links_path = stdnse.get_script_args('http-malware-host.malwarepath') or 'nselib/data/http-malware-compromised-paths.lst'
  fetch_vulnerable_links(vulnerable_links_path)

  local response = {}
  local may_be_compromised = 0
  local base_url = "http://" .. host.ip .. ":" .. port.number

  for _, link in ipairs(vulnerable_links) do
    -- Perform a GET request on the file
    result = http.get_url(base_url .. link)

    if(not(result)) then
      -- Do nothing
      stdnse.debug(string.format("Couldn't perform GET request on %s", link))
    elseif(result.status == 302) then
      -- This acts as a flag
      may_be_compromised = 1

      if(result.header.location) then
        table.insert(response, string.format("Host appears to be infected (%s redirects to %s)", link, result.header.location))
      else
        table.insert(response, string.format("Host appears to be infected %s return a redirect", link))
      end
    end
  end

  -- Final output, appending the references.
  if may_be_compromised == 1 then
    table.insert(response, "See:  http://blog.unmaskparasites.com/2009/09/11/dynamic-dns-and-botnet-of-zombie-web-servers/")
    table.insert(response, "See:  https://blog.sucuri.net/2012/07/new-web-malware-attacks-from-ruin-cgi16.html")
    return stdnse.format_output(true, response)
  else
    -- Not infected
    if(nmap.verbosity() > 0) then
      return "Host appears to be clean"
    else
      return nil
    end
  end

end
