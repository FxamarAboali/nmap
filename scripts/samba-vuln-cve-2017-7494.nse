local smb = require "smb"
local string = require "string"
local vulns = require "vulns"
local stdnse = require "stdnse"
local table = require "table"
local nmap = require "nmap"

description = [[
Checks if target machines are vulnerable to the arbitrary shared library load
vulnerability CVE-2017-7494.

Samba versions 3.5.0 to 4.4.14, 4.5.10 and 4.6.4 are affected by a
vulnerability that allows remote code execution, allowing a malicious client
to upload a shared library to a writable share, and then cause the server to
load and execute it.


Script checks the preconditions for the exploit to happen
  1) whether the service running is the correct version of Samba
  2) whether there exists writable shares for the execution of the script
  3) whether the workaround (disabling of named pipes) was applied

This script is based on the metasploit module written by hdm.

References:
* https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/linux/samba/is_known_pipename.rb
* https://www.samba.org/samba/security/CVE-2017-7494.html
* http://blogs.360.cn/blog/samba%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9Ecve-2017-7494%E5%88%86%E6%9E%90/

]]

-----------------------------------------------------------------------
---
-- @usage
-- nmap --script samba-vuln-cve-2017-7494 -p 445 <target>
-- @output
-- PORT    STATE SERVICE
-- 445/tcp open  microsoft-ds
-- MAC Address: 00:0C:29:16:04:53 (VMware)
--
-- Host script results:
-- | samba-vuln-cve-2017-7494:
-- |   VULNERABLE:
-- |   SAMBA Remote Code Execution from Writable Share
-- |     State: VULNERABLE
-- |     IDs:  CVE:CVE-2017-7494
-- |     Risk factor: HIGH  CVSSv2: 9.03 (HIGH) (AV:N/AC:L/Au:S/C:C/I:C/A:C)
-- |       All versions of Samba from 3.5.0 onwards are vulnerable to a remote
-- |       code execution vulnerability, allowing a malicious client to upload a
-- |       shared library to a writable share, and then cause the server to load
-- |       and execute it.
-- |
-- |     Disclosure date: 2017-05-24
-- |     Check results:
-- |       Writable share found.
-- |        Name: test
-- |        Type: STYPE_DISKTREE
-- |        Path: C:\tmp
-- |     References:
-- |       https://www.samba.org/samba/security/CVE-2017-7494.html
-- |_      https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7494


author = "Wong Wai Tuck"
license = "Same as Nmap--See https://nmap.org/book/man-legal.html"
categories = {"vuln","intrusive"}

hostrule = function(host)
  return smb.get_port(host) ~= nil
end

dependencies = {"smb-os-discovery", "smb-brute"}

local function determine_vuln_version(version, samba_cve)
  local major, minor, patch
  major, minor, patch = string.match(version,"(%d+)%.(%d+)%.(%d+).*")
  stdnse.debug("Major version: %s, Minor version: %s, Patch version: %s", major, minor, patch)

  major, minor, patch = tonumber(major), tonumber(minor), tonumber(patch)

  -- no patches available for 3.5.X and 3.6.X
  if major == 3 then
    if minor >= 5 then
      samba_cve.state = vulns.STATE.LIKELY_VULN
    end

  elseif major == 4 then
    if minor < 4 then
      samba_cve.state = vulns.STATE.LIKELY_VULN

    elseif minor == 4 then
      if patch >= 14 then
        samba_cve.state = vulns.STATE.NOT_VULN -- patched in 4.4.14
      else
        samba_cve.state = vulns.STATE.LIKELY_VULN
      end

    elseif minor == 5 then
      if patch >= 10 then
        samba_cve.state = vulns.STATE.NOT_VULN -- patched in 4.5.10
      else
        samba_cve.state = vulns.STATE.LIKELY_VULN
      end

    elseif minor == 6 then
      if patch >= 4 then
        samba_cve.state = vulns.STATE.NOT_VULN -- patched in 4.6.4
      else
        samba_cve.state = vulns.STATE.LIKELY_VULN
      end
    end
  end

end

action = function(host,port)
  local port = nmap.get_port_state(host,{number=smb.get_port(host),protocol='tcp'})

  local version = port.version.version

  -- retrieve version of samba using smb.get_os
  if not version then
    local status, result = smb.get_os(host)

    if(status == false) then
      return stdnse.format_output(false, result)
    end

    if string.match(result.lanmanager,"^Samba ") then
      version = string.match(result.lanmanager,"^Samba (.*)")
    else
      return stdnse.format_output(false,
        "Either versioning failed or samba does not exist on the port!")
    end
  end


  stdnse.debug("Port Version: %s", port.version.version)

  local result, stats
  local response = {}

  local samba_cve  = {
    title = "SAMBA Remote Code Execution from Writable Share",
    IDS = {CVE = 'CVE-2017-7494'},
    risk_factor = "HIGH",
    scores = {
      CVSSv2 = "9.03 (HIGH) (AV:N/AC:L/Au:S/C:C/I:C/A:C)",
    },
    description = [[
All versions of Samba from 3.5.0 onwards are vulnerable to a remote
code execution vulnerability, allowing a malicious client to upload a
shared library to a writable share, and then cause the server to load
and execute it.
]],
    references = {
      'https://www.samba.org/samba/security/CVE-2017-7494.html',
    },
    dates = {
      disclosure = {year = '2017', month = '05', day = '24'},
    },
    check_results = {},
  }

  local report = vulns.Report:new(SCRIPT_NAME, host, port)
  samba_cve.state = vulns.STATE.NOT_VULN

  -- determine if version is vulnerable
  determine_vuln_version(version, samba_cve)

  -- only check for writeable shares if version is vulnerable
  if samba_cve.state == vulns.STATE.LIKELY_VULN then
    local status, shares, extra, vuln
    vuln = false
    status, shares, extra = smb.share_get_list(host)
    if not status then
      table.insert(samba_cve.check_results,
        string.format("Couldn't enumerate shares: %s", shares))
    else
      for i = 1, #shares, 1 do
        local share = shares[i]
        local details = share['details']

        stdnse.debug("Share %s \n Details %s", share.name, details)
        -- when nt pipe support is disabled, IPC$ gives NT_STATUS_ACCESS_DENIED
        -- check for "nt pipe support = no" workaround
        if string.match(share.name, 'IPC%$')  and details == "NT_STATUS_ACCESS_DENIED" then
          samba_cve.state = vulns.STATE.NOT_VULN
          vuln = false
          break
        end

        if (share['user_can_write'] or share['anonymous_can_write']) and not
          string.match(share.name, 'IPC%$') then
          vuln = true
          table.insert(samba_cve.check_results,
            string.format(
            "Writable share found. \n Name: %s \n Type: %s \n Path: %s",
            share.name, details.sharetype, details.path))
        end
      end

      if not vuln and status then
        table.insert(samba_cve.check_results,
              string.format("Couldn't find any writeable shares", shares))
      end

      if vuln then
        samba_cve.state = vulns.STATE.VULN
      end


    end

  end

  return report:make_output(samba_cve)

end


